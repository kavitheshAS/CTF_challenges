from collections import deque
# from output import p_chunks, q_chunks, N, c
from Crypto.Util.number import inverse, long_to_bytes

N=28891905534247909920730935410779326791368391683547998340830770427536374129531974576216116986350523907981247777046478859421537223673238103255148230012105660018510783825143308440413070140851208760395265723890222884333458989021101872189195668399697261081079503189033232016826123064140851108263513089525726631395277842115387263908959117262050314899187302771167137627767857909661440288638059864195199726133634411959067217078180017891722392161703455421504799868095200678604356475351256622057500393942094129862141627471154859127190649485208696100596131883344096876520324799815067986586039062683589545863163559524124021878171
c=15208732842322000255647928477703626012989025015168338306677592283671504455096441897702946110682285288882875987759280605812735514676481117479144974387969123323107218108625653975640676990416856079554815558112966199288148522241053726631583992025144225421358660772317646927773940682771162409460886674478439066057539712319146987051545396916593122773977889501486984800753280807968073410484801281781563177332173687599311785960106209199107201466750169479890303570822302916878562469650786012335864823718983023263535882832340096977119034680550099981430427014284727654396265906286191921086611467003422937960660982979712025623267
p_chunks=[10241, 21205, 47404, 63955, 52586, 20105, 47119, 37891, 63790, 30341, 54265, 22607, 49173, 27448, 56832, 65218, 1212, 35126, 959, 19114, 34014, 16432, 20254, 14432, 53215, 45274, 18353, 903, 8083, 10791, 41699, 41338, 55324, 31547, 27331, 9929, 18368, 25645, 56992, 38313, 4567, 32818, 38880, 6869, 33913, 55822, 21120, 61266, 16267, 19189, 65155, 9711, 41544, 20870, 5052, 56098, 43288, 61591, 41721, 35844, 43413, 47665, 45413, 43574]
q_chunks=[21492, 36096, 34220, 42764, 36037, 17802, 53424, 15677, 56627, 49854, 18996, 43688, 46798, 38069, 37556, 828, 5694, 59226, 56151, 3950, 29500, 49779, 55341, 55272, 60508, 54529, 33496, 41528, 19070, 58932, 41987, 23916, 40112, 4855, 15610, 58227, 44436, 35216, 36347, 43169, 3776, 62586, 16461, 40971, 47566, 54359, 20885, 48705, 21128, 28796, 28357, 11042, 2742, 9189, 1906, 10507, 22553, 1466, 58763, 16370, 28397, 41225, 20976, 50167]


def bfs_find_p_q(p_chunks, q_chunks, N, length):
    queue = deque([(0, [], [])])

    while queue:
        i, current_ps, current_qs = queue.popleft()

        if i == length:
            return current_ps, current_qs

        partial_N = N % 2 ** (16 * (i + 1))
        partial_p_poly = sum(
            [pi * (2 ** (16 * idx)) for idx, pi in enumerate(current_ps)]
        ) % (2 ** (16 * (i + 1)))
        partial_q_poly = sum(
            [qi * (2 ** (16 * idx)) for idx, qi in enumerate(current_qs)]
        ) % (2 ** (16 * (i + 1)))

        for pi in p_chunks:
            for qi in q_chunks:
                if (
                    (partial_p_poly + pi * (2 ** (16 * i)))
                    * (partial_q_poly + qi * (2 ** (16 * i)))
                ) % (2 ** (16 * (i + 1))) == partial_N:
                    queue.append((i + 1, current_ps + [pi], current_qs + [qi]))

    raise Exception("No valid solution found.")


LENGTH = len(p_chunks)

found_ps, found_qs = bfs_find_p_q(p_chunks, q_chunks, N, LENGTH)

p = sum([pi * (2 ** (16 * idx)) for idx, pi in enumerate(found_ps)])
q = sum([qi * (2 ** (16 * idx)) for idx, qi in enumerate(found_qs)])

print(f"p = {p}")
print(f"q = {q}")
assert p * q == N

e = 0x10001
m = pow(c, inverse(e, (p - 1) * (q - 1)), p * q)
#when inputting each of them as an integer
plaintext=long_to_bytes(m)
print(plaintext)
print(hex(int(long_to_bytes(m).decode())))

# file_name = "output.py"
# decrypted_results = []

# with open(file_name, "r") as file:
#     lines = file.readlines()

# for i in range(0, len(lines), 4):
#     try:
#         # Parse the variables from each chunk
#         N = int(lines[i].split('=')[1].strip())
#         c = int(lines[i + 1].split('=')[1].strip())
#         p_chunks = ast.literal_eval(lines[i + 2].split('=')[1].strip())
#         q_chunks = ast.literal_eval(lines[i + 3].split('=')[1].strip())

