import numpy as np
TO_READ=64

class state256:
    def __init__(self):
        self.h=[0]*8 
        self.s=[0]*4 
        self.t=[0]*2 

        self.buflen=0
        self.nullt=0

        self.buf = np.zeros(TO_READ, dtype=np.uint32)

def u8to32_big(p):
    return np.uint32((p[0]<<24) | (p[1]<<16) | (p[2]<<8) | p[3])

def u32to8_big(value):
    value = value & 0xFFFFFFFF  
    arr = bytearray(4)
    arr[0] = (value >> 24) & 0xFF
    arr[1] = (value >> 16) & 0xFF
    arr[2] = (value >> 8) & 0xFF
    arr[3] = value & 0xFF
    return arr

def rot(x,n):
    return ((x<<(32-n)) | (x>>n)) & 0xFFFFFFFF

def rotl(x, n):
    return ((x >> (32 - n)) | (x << n)) & 0xFFFFFFFF

sigma = np.array([
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
    [14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3],
    [11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4],
    [7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8],
    [9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13],
    [2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9],
    [12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11],
    [13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10],
    [6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5],
    [10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0],
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
    [14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3],
    [11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4],
    [7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8],
    [9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13],
    [2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9]
],dtype=np.uint8)

constant = np.array([
    0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344,
    0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,
    0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,
    0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917
],dtype=np.uint32)

padding = np.array([
    0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
],dtype=np.uint8)
    
def G(v, m, r, a, b, c, d, e):
    v[a] = np.uint32(v[a] + np.uint32(m[sigma[r][e]]) + v[b])
    v[d] = np.uint32(rot(np.uint32(v[d] ^ v[a]), 16))
    v[c] = np.uint32(v[c] + v[d])
    v[b] = np.uint32(rot(np.uint32(v[b] ^ v[c]), 12))
    
    v[a] = np.uint32(v[a] + np.uint32(m[sigma[r][e + 1]]) + v[b])
    v[d] = np.uint32(rot(np.uint32(v[d] ^ v[a]), 8))
    v[c] = np.uint32(v[c] + v[d])
    v[b] = np.uint32(rot(np.uint32(v[b] ^ v[c]), 7))
